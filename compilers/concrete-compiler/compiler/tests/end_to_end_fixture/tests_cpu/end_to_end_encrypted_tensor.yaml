## Part of the Concrete Compiler Project, under the BSD3 License with Zama
## Exceptions. See
## https://github.com/zama-ai/concrete-compiler-internal/blob/main/LICENSE.txt
## for license information.
##
## This file contains programs and references to end to end test the compiler.
## Program in this file aims to test the `tensor` dialects on encrypted integers.
##
## Operators:
## - tensor.extract
## - tensor.insert
## - tensor.extract_slice
## - tensor.insert_slice

description: identity
program: |
  func.func @main(%t: tensor<2x10x!FHE.eint<6>>) -> tensor<2x10x!FHE.eint<6>> {
    return %t : tensor<2x10x!FHE.eint<6>>
  }
tests:
  - inputs:
    - tensor: [63, 12,  7, 43, 52,  9, 26, 34, 22,  0,
                0,  1,  2,  3,  4,  5,  6,  7,  8,  9]
      shape: [2,10]
    outputs:
    - tensor: [63, 12,  7, 43, 52,  9, 26, 34, 22,  0,
                0,  1,  2,  3,  4,  5,  6,  7,  8,  9]
      shape: [2,10]
---
description: identity_crt
program: |
  func.func @main(%t: tensor<2x10x!FHE.eint<16>>) -> tensor<2x10x!FHE.eint<16>> {
    return %t : tensor<2x10x!FHE.eint<16>>
  }
encoding: crt
tests:
  - inputs:
    - tensor: [65535, 46706, 18752, 55384, 55709, 1726, 35063, 57650, 45551, 5769,
               38786, 36362, 65112, 5748, 60515, 64814, 65491, 4271, 9294, 0]
      shape: [2,10]
    outputs:
    - tensor: [65535, 46706, 18752, 55384, 55709, 1726, 35063, 57650, 45551, 5769,
               38786, 36362, 65112, 5748, 60515, 64814, 65491, 4271, 9294, 0]
      shape: [2,10]
---
description: extract
program: |
  func.func @main(%t: tensor<2x10x!FHE.eint<6>>, %i: index, %j: index) ->
  !FHE.eint<6> {
    %c = tensor.extract %t[%i, %j] : tensor<2x10x!FHE.eint<6>>
    return %c : !FHE.eint<6>
  }
tests:
  - inputs:
    - tensor: [63, 12,  7, 43, 52,  9, 26, 34, 22,  0,
                0,  1,  2,  3,  4,  5,  6,  7,  8,  9]
      shape: [2,10]
    - scalar: 0
    - scalar: 0
    outputs:
    - scalar: 63
  - inputs:
    - tensor: [63, 12,  7, 43, 52,  9, 26, 34, 22,  0,
                0,  1,  2,  3,  4,  5,  6,  7,  8,  9]
      shape: [2,10]
    - scalar: 0
    - scalar: 9
    outputs:
    - scalar: 0
  - inputs:
    - tensor: [63, 12,  7, 43, 52,  9, 26, 34, 22,  0,
                0,  1,  2,  3,  4,  5,  6,  7,  8,  9]
      shape: [2,10]
    - scalar: 1
    - scalar: 0
    outputs:
    - scalar: 0
  - inputs:
    - tensor: [63, 12,  7, 43, 52,  9, 26, 34, 22,  0,
                0,  1,  2,  3,  4,  5,  6,  7,  8,  9]
      shape: [2,10]
    - scalar: 1
    - scalar: 9
    outputs:
    - scalar: 9
---
description: extract_crt
program: |
  func.func @main(%t: tensor<2x10x!FHE.eint<16>>, %i: index, %j: index) ->
  !FHE.eint<16> {
    %c = tensor.extract %t[%i, %j] : tensor<2x10x!FHE.eint<16>>
    return %c : !FHE.eint<16>
  }
encoding: crt
tests:
  - inputs:
    - tensor: [65535, 46706, 18752, 55384, 55709, 1726, 35063, 57650, 45551, 5769,
               38786, 36362, 65112, 5748, 60515, 64814, 65491, 4271, 9294, 0]
      shape: [2,10]
    - scalar: 0
    - scalar: 0
    outputs:
    - scalar: 65535
  - inputs:
    - tensor: [63, 12,  7, 43, 52,  9, 26, 34, 22,  0,
                0,  1,  2,  3,  4,  5,  6,  7,  8,  9]
      shape: [2,10]
    - scalar: 0
    - scalar: 9
    outputs:
    - scalar: 0
  - inputs:
    - tensor: [63, 12,  7, 43, 52,  9, 26, 34, 22,  0,
                0,  1,  2,  3,  4,  5,  6,  7,  8,  9]
      shape: [2,10]
    - scalar: 1
    - scalar: 0
    outputs:
    - scalar: 0
  - inputs:
    - tensor: [63, 12,  7, 43, 52,  9, 26, 34, 22,  0,
                0,  1,  2,  3,  4,  5,  6,  7,  8,  9]
      shape: [2,10]
    - scalar: 1
    - scalar: 9
    outputs:
    - scalar: 9
---
description: insert
program: |
  func.func @main(%t: tensor<2x10x!FHE.eint<6>>, %i: index, %j: index, %x: !FHE.eint<6>) -> tensor<2x10x!FHE.eint<6>> {
    %r = tensor.insert %x into %t[%i, %j] : tensor<2x10x!FHE.eint<6>>
    return %r : tensor<2x10x!FHE.eint<6>>
  }
tests:
  - inputs:
    - tensor: [63, 12,  7, 43, 52,  9, 26, 34, 22,  0,
                0,  1,  2,  3,  4,  5,  6,  7,  8,  9]
      shape: [2,10]
    - scalar: 0
    - scalar: 0
    - scalar: 42
    outputs:
    - tensor: [42, 12,  7, 43, 52,  9, 26, 34, 22,  0,
                0,  1,  2,  3,  4,  5,  6,  7,  8,  9]
      shape: [2,10]
  - inputs:
    - tensor: [63, 12,  7, 43, 52,  9, 26, 34, 22,  0,
                0,  1,  2,  3,  4,  5,  6,  7,  8,  9]
      shape: [2,10]
    - scalar: 0
    - scalar: 1
    - scalar: 42
    outputs:
    - tensor: [63, 42,  7, 43, 52,  9, 26, 34, 22,  0,
                0,  1,  2,  3,  4,  5,  6,  7,  8,  9]
      shape: [2,10]
  - inputs:
    - tensor: [63, 12,  7, 43, 52,  9, 26, 34, 22,  0,
                42,  1,  2,  3,  4,  5,  6,  7,  8,  9]
      shape: [2,10]
    - scalar: 1
    - scalar: 0
    - scalar: 42
    outputs:
    - tensor: [63, 12,  7, 43, 52,  9, 26, 34, 22,  0,
                42,  1,  2,  3,  4,  5,  6,  7,  8,  9]
      shape: [2,10]
  - inputs:
    - tensor: [63, 12,  7, 43, 52,  9, 26, 34, 22,  0,
                42,  1,  2,  3,  4,  5,  6,  7,  8,  9]
      shape: [2,10]
    - scalar: 1
    - scalar: 9
    - scalar: 42
    outputs:
    - tensor: [63, 12,  7, 43, 52,  9, 26, 34, 22,  0,
                42,  1,  2,  3,  4,  5,  6,  7,  8,  42]
      shape: [2,10]
---
description: insert_crt
program: |
  func.func @main(%t: tensor<2x10x!FHE.eint<16>>, %i: index, %j: index, %x: !FHE.eint<16>) -> tensor<2x10x!FHE.eint<16>> {
    %r = tensor.insert %x into %t[%i, %j] : tensor<2x10x!FHE.eint<16>>
    return %r : tensor<2x10x!FHE.eint<16>>
  }
encoding: crt
tests:
  - inputs:
    - tensor: [65535, 46706, 18752, 55384, 55709, 1726, 35063, 57650, 45551, 5769,
               38786, 36362, 65112, 5748, 60515, 64814, 65491, 4271, 9294, 0]
      shape: [2,10]
    - scalar: 0
    - scalar: 0
    - scalar: 42
    outputs:
    - tensor: [42, 46706, 18752, 55384, 55709, 1726, 35063, 57650, 45551, 5769,
               38786, 36362, 65112, 5748, 60515, 64814, 65491, 4271, 9294, 0]
      shape: [2,10]
  - inputs:
    - tensor: [65535, 46706, 18752, 55384, 55709, 1726, 35063, 57650, 45551, 5769,
               38786, 36362, 65112, 5748, 60515, 64814, 65491, 4271, 9294, 0]
      shape: [2,10]
    - scalar: 0
    - scalar: 1
    - scalar: 42
    outputs:
    - tensor: [65535, 42, 18752, 55384, 55709, 1726, 35063, 57650, 45551, 5769,
               38786, 36362, 65112, 5748, 60515, 64814, 65491, 4271, 9294, 0]
      shape: [2,10]
  - inputs:
    - tensor: [65535, 46706, 18752, 55384, 55709, 1726, 35063, 57650, 45551, 5769,
               38786, 36362, 65112, 5748, 60515, 64814, 65491, 4271, 9294, 0]
      shape: [2,10]
    - scalar: 1
    - scalar: 0
    - scalar: 42
    outputs:
    - tensor: [65535, 46706, 18752, 55384, 55709, 1726, 35063, 57650, 45551, 5769,
               42, 36362, 65112, 5748, 60515, 64814, 65491, 4271, 9294, 0]
      shape: [2,10]
  - inputs:
    - tensor: [65535, 46706, 18752, 55384, 55709, 1726, 35063, 57650, 45551, 5769,
               38786, 36362, 65112, 5748, 60515, 64814, 65491, 4271, 9294, 0]
      shape: [2,10]
    - scalar: 1
    - scalar: 9
    - scalar: 42
    outputs:
    - tensor: [65535, 46706, 18752, 55384, 55709, 1726, 35063, 57650, 45551, 5769,
               38786, 36362, 65112, 5748, 60515, 64814, 65491, 4271, 9294, 42]
      shape: [2,10]
---
description: extract_slice
program: |
  func.func @main(%t: tensor<2x10x!FHE.eint<6>>) -> tensor<1x5x!FHE.eint<6>> {
    %r = tensor.extract_slice %t[1, 5][1, 5][1, 1] : tensor<2x10x!FHE.eint<6>> to tensor<1x5x!FHE.eint<6>>
    return %r : tensor<1x5x!FHE.eint<6>>
  }
tests:
  - inputs:
    - tensor: [63, 12,  7, 43, 52,  9, 26, 34, 22,  0,
                0,  1,  2,  3,  4,  5,  6,  7,  8,  9]
      shape: [2,10]
    outputs:
    - tensor: [ 5,  6,  7,  8,  9]
      shape: [1,5]
---
description: extract_slice_crt
program: |
  func.func @main(%t: tensor<2x10x!FHE.eint<16>>) -> tensor<1x5x!FHE.eint<16>> {
    %r = tensor.extract_slice %t[1, 5][1, 5][1, 1] : tensor<2x10x!FHE.eint<16>> to tensor<1x5x!FHE.eint<16>>
    return %r : tensor<1x5x!FHE.eint<16>>
  }
encoding: crt
tests:
  - inputs:
      - tensor: [65535, 46706, 18752, 55384, 55709, 1726, 35063, 57650, 45551, 5769,
                 38786, 36362, 65112, 5748, 60515, 64814, 65491, 4271, 9294, 0]
        shape: [2,10]
    outputs:
      - tensor: [64814, 65491, 4271, 9294, 0]
        shape: [1,5]
---
description: extract_slice_with_rank_reduction
program: |
  func.func @main(%t: tensor<2x10x!FHE.eint<6>>) -> tensor<5x!FHE.eint<6>> {
    %r = tensor.extract_slice %t[1, 5][1, 5][1, 1] : tensor<2x10x!FHE.eint<6>> to tensor<5x!FHE.eint<6>>
    return %r : tensor<5x!FHE.eint<6>>
  }
tests:
  - inputs:
    - tensor: [63, 12,  7, 43, 52,  9, 26, 34, 22,  0,
                0,  1,  2,  3,  4,  5,  6,  7,  8,  9]
      shape: [2,10]
    outputs:
    - tensor: [ 5,  6,  7,  8,  9]
      shape: [5]
---
description: extract_slice_with_rank_reduction_crt
program: |
  func.func @main(%t: tensor<2x10x!FHE.eint<16>>) -> tensor<5x!FHE.eint<16>> {
    %r = tensor.extract_slice %t[1, 5][1, 5][1, 1] : tensor<2x10x!FHE.eint<16>> to tensor<5x!FHE.eint<16>>
    return %r : tensor<5x!FHE.eint<16>>
  }
encoding: crt
tests:
  - inputs:
      - tensor: [65535, 46706, 18752, 55384, 55709, 1726, 35063, 57650, 45551, 5769,
                 38786, 36362, 65112, 5748, 60515, 64814, 65491, 4271, 9294, 0]
        shape: [2,10]
    outputs:
      - tensor: [64814, 65491, 4271, 9294, 0]
        shape: [5]
---
description: extract_slice_stride
program: |
  func.func @main(%t: tensor<2x10x!FHE.eint<6>>) -> tensor<1x5x!FHE.eint<6>> {
    %r = tensor.extract_slice %t[1, 0][1, 5][1, 2] : tensor<2x10x!FHE.eint<6>> to tensor<1x5x!FHE.eint<6>>
    return %r : tensor<1x5x!FHE.eint<6>>
  }
tests:
  - inputs:
    - tensor: [63, 12,  7, 43, 52,  9, 26, 34, 22,  0,
                0,  1,  2,  3,  4,  5,  6,  7,  8,  9]
      shape: [2,10]
    outputs:
    - tensor: [0, 2, 4, 6, 8]
      shape: [1,5]
---
description: extract_slice_stride_crt
program: |
  func.func @main(%t: tensor<2x10x!FHE.eint<16>>) -> tensor<1x5x!FHE.eint<16>> {
    %r = tensor.extract_slice %t[1, 0][1, 5][1, 2] : tensor<2x10x!FHE.eint<16>> to tensor<1x5x!FHE.eint<16>>
    return %r : tensor<1x5x!FHE.eint<16>>
  }
encoding: crt
tests:
  - inputs:
      - tensor: [65535, 46706, 18752, 55384, 55709, 1726, 35063, 57650, 45551, 5769,
                 38786, 36362, 65112, 5748, 60515, 64814, 65491, 4271, 9294, 0]
        shape: [2,10]
    outputs:
      - tensor: [38786, 65112, 60515, 65491, 9294]
        shape: [1,5]
---
description: extract_slice_negative_stride
program: |
  func.func @main(%arg0: tensor<3x!FHE.eint<5>>) -> tensor<3x!FHE.eint<5>> {
    %0 = tensor.extract_slice %arg0[2] [3] [-1] : tensor<3x!FHE.eint<5>> to tensor<3x!FHE.eint<5>>
    return %0 : tensor<3x!FHE.eint<5>>
  }
tests:
  - inputs:
    - tensor: [1, 2, 3]
      shape: [3]
    outputs:
    - tensor: [3, 2, 1]
      shape: [3]
---
description: extract_slice_negative_stride_crt
program: |
  func.func @main(%arg0: tensor<3x!FHE.eint<16>>) -> tensor<3x!FHE.eint<16>> {
    %0 = tensor.extract_slice %arg0[2] [3] [-1] : tensor<3x!FHE.eint<16>> to tensor<3x!FHE.eint<16>>
    return %0 : tensor<3x!FHE.eint<16>>
  }
encoding: crt
tests:
  - inputs:
      - tensor: [38786, 65112, 60515]
        shape: [3]
    outputs:
      - tensor: [60515, 65112, 38786]
        shape: [3]
---
description: insert_slice
program: |
  func.func @main(%t0: tensor<2x10x!FHE.eint<6>>, %t1: tensor<2x2x!FHE.eint<6>>) -> tensor<2x10x!FHE.eint<6>> {
    %r = tensor.insert_slice %t1 into %t0[0, 5][2, 2][1, 1] : tensor<2x2x!FHE.eint<6>> into tensor<2x10x!FHE.eint<6>>
    return %r : tensor<2x10x!FHE.eint<6>>
  }
tests:
  - inputs:
    - tensor: [63, 12,  7, 43, 52,  9, 26, 34, 22,  0,
                0,  1,  2,  3,  4,  5,  6,  7,  8,  9]
      shape: [2,10]
    - tensor: [31, 32,
               33, 34]
      shape: [2,2]
    outputs:
    - tensor: [63, 12, 7, 43, 52, 31, 32, 34, 22,  0,
               0,  1,  2,  3,  4, 33, 34,  7,  8,  9]
      shape: [2,10]
---
description: insert_slice_crt
program: |
  func.func @main(%t0: tensor<2x10x!FHE.eint<16>>, %t1: tensor<2x2x!FHE.eint<16>>) -> tensor<2x10x!FHE.eint<16>> {
    %r = tensor.insert_slice %t1 into %t0[0, 5][2, 2][1, 1] : tensor<2x2x!FHE.eint<16>> into tensor<2x10x!FHE.eint<16>>
    return %r : tensor<2x10x!FHE.eint<16>>
  }
encoding: crt
tests:
  - inputs:
      - tensor: [63, 12,  7, 43, 52,  9, 26, 34, 22,  0,
                 0,  1,  2,  3,  4,  5,  6,  7,  8,  9]
        shape: [2,10]
      - tensor: [31, 32,
                 33, 34]
        shape: [2,2]
    outputs:
      - tensor: [63, 12, 7, 43, 52, 31, 32, 34, 22,  0,
                 0,  1,  2,  3,  4, 33, 34,  7,  8,  9]
        shape: [2,10]
---
description: from_elements
program: |
  func.func @main(%arg0: !FHE.eint<4>, %arg1: !FHE.eint<4>, %arg2: !FHE.eint<4>, %arg3: !FHE.eint<4>, %arg4: !FHE.eint<4>, %arg5: !FHE.eint<4>) -> tensor<6x!FHE.eint<4>> {
    %0 = tensor.from_elements %arg0, %arg1, %arg2, %arg3, %arg4, %arg5 : tensor<6x!FHE.eint<4>>
    return %0 : tensor<6x!FHE.eint<4>>
  }
tests:
  - inputs:
    - scalar: 0
    - scalar: 1
    - scalar: 2
    - scalar: 3
    - scalar: 4
    - scalar: 5
    outputs:
    - tensor: [0, 1, 2, 3, 4, 5]
      shape: [6]
---
description: from_elements_crt
program: |
  func.func @main(%arg0: !FHE.eint<16>, %arg1: !FHE.eint<16>, %arg2: !FHE.eint<16>, %arg3: !FHE.eint<16>, %arg4: !FHE.eint<16>, %arg5: !FHE.eint<16>) -> tensor<6x!FHE.eint<16>> {
    %0 = tensor.from_elements %arg0, %arg1, %arg2, %arg3, %arg4, %arg5 : tensor<6x!FHE.eint<16>>
    return %0 : tensor<6x!FHE.eint<16>>
  }
encoding: crt
tests:
  - inputs:
      - scalar: 0
      - scalar: 1
      - scalar: 2
      - scalar: 3
      - scalar: 4
      - scalar: 5
    outputs:
      - tensor: [0, 1, 2, 3, 4, 5]
        shape: [6]
---
description: from_elements_2D
program: |
  func.func @main(%arg0 : !FHE.eint<4>, %arg1 : !FHE.eint<4>, %arg2 : !FHE.eint<4>, %arg3 : !FHE.eint<4>, %arg4 : !FHE.eint<4>, %arg5 : !FHE.eint<4>) -> tensor<2x3x!FHE.eint<4>> {
    %0 = tensor.from_elements %arg0, %arg1, %arg2, %arg3, %arg4, %arg5 : tensor<2x3x!FHE.eint<4>>
    return %0 : tensor<2x3x!FHE.eint<4>>
  }
tests:
  - inputs:
    - scalar: 0
    - scalar: 1
    - scalar: 2
    - scalar: 3
    - scalar: 4
    - scalar: 5
    outputs:
    - tensor: [0, 1, 2,
               3, 4, 5]
      shape: [2, 3]
---
description: from_elements_2D_crt
program: |
  func.func @main(%arg0 : !FHE.eint<16>, %arg1 : !FHE.eint<16>, %arg2 : !FHE.eint<16>, %arg3 : !FHE.eint<16>, %arg4 : !FHE.eint<16>, %arg5 : !FHE.eint<16>) -> tensor<2x3x!FHE.eint<16>> {
    %0 = tensor.from_elements %arg0, %arg1, %arg2, %arg3, %arg4, %arg5 : tensor<2x3x!FHE.eint<16>>
    return %0 : tensor<2x3x!FHE.eint<16>>
  }
encoding: crt
tests:
  - inputs:
      - scalar: 0
      - scalar: 1
      - scalar: 2
      - scalar: 3
      - scalar: 4
      - scalar: 5
    outputs:
      - tensor: [0, 1, 2,
                 3, 4, 5]
        shape: [2, 3]
---
description: expand_shape
program: |
  func.func @main(%2: tensor<1x1x10x!FHE.eint<6>>) -> tensor<1x1x1x10x!FHE.eint<6>> {
    %3 = tensor.expand_shape %2 [[0], [1], [2, 3]] : tensor<1x1x10x!FHE.eint<6>> into tensor<1x1x1x10x!FHE.eint<6>>
    return %3 : tensor<1x1x1x10x!FHE.eint<6>>
  }
tests:
  - inputs:
      - tensor: [63, 12,  7, 43, 52,  9, 26, 34, 22,  0]
        shape: [1,1,10]
    outputs:
      - tensor: [63, 12,  7, 43, 52,  9, 26, 34, 22,  0]
        shape: [1,1,1,10]
---
description: expand_shape_crt
program: |
  func.func @main(%2: tensor<1x1x10x!FHE.eint<16>>) -> tensor<1x1x1x10x!FHE.eint<16>> {
    %3 = tensor.expand_shape %2 [[0], [1], [2, 3]] : tensor<1x1x10x!FHE.eint<16>> into tensor<1x1x1x10x!FHE.eint<16>>
    return %3 : tensor<1x1x1x10x!FHE.eint<16>>
  }
encoding: crt
tests:
  - inputs:
      - tensor: [63, 12,  7, 43, 52,  9, 26, 34, 22,  0]
        shape: [1,1,10]
    outputs:
      - tensor: [63, 12,  7, 43, 52,  9, 26, 34, 22,  0]
        shape: [1,1,1,10]
---
description: expand_shape_2
program: |
  func.func @main(%2: tensor<2x5x!FHE.eint<6>>) -> tensor<1x2x1x5x1x!FHE.eint<6>> {
    %3 = tensor.expand_shape %2 [[0,1], [2,3,4]] : tensor<2x5x!FHE.eint<6>> into tensor<1x2x1x5x1x!FHE.eint<6>>
    return %3 : tensor<1x2x1x5x1x!FHE.eint<6>>
  }
tests:
  - inputs:
      - tensor: [63, 12,  7, 43, 52,  9, 26, 34, 22,  0]
        shape: [2,5]
    outputs:
      - tensor: [63, 12,  7, 43, 52,  9, 26, 34, 22,  0]
        shape: [1,2,1,5,1]
---
description: expand_shape_2_crt
program: |
  func.func @main(%2: tensor<2x5x!FHE.eint<16>>) -> tensor<1x2x1x5x1x!FHE.eint<16>> {
    %3 = tensor.expand_shape %2 [[0,1], [2,3,4]] : tensor<2x5x!FHE.eint<16>> into tensor<1x2x1x5x1x!FHE.eint<16>>
    return %3 : tensor<1x2x1x5x1x!FHE.eint<16>>
  }
encoding: crt
tests:
  - inputs:
      - tensor: [63, 12,  7, 43, 52,  9, 26, 34, 22,  0]
        shape: [2,5]
    outputs:
      - tensor: [63, 12,  7, 43, 52,  9, 26, 34, 22,  0]
        shape: [1,2,1,5,1]
---
description: collapse_shape
program: |
  func.func @main(%2: tensor<1x1x10x!FHE.eint<6>>) -> tensor<1x10x!FHE.eint<6>> {
    %3 = tensor.collapse_shape %2 [[0,1], [2]] : tensor<1x1x10x!FHE.eint<6>> into tensor<1x10x!FHE.eint<6>>
    return %3 : tensor<1x10x!FHE.eint<6>>
  }
tests:
  - inputs:
      - tensor: [63, 12,  7, 43, 52,  9, 26, 34, 22,  0]
        shape: [1,1,10]
    outputs:
      - tensor: [63, 12,  7, 43, 52,  9, 26, 34, 22,  0]
        shape: [1,10]
---
description: collapse_shape_crt
program: |
  func.func @main(%2: tensor<1x1x10x!FHE.eint<16>>) -> tensor<1x10x!FHE.eint<16>> {
    %3 = tensor.collapse_shape %2 [[0,1], [2]] : tensor<1x1x10x!FHE.eint<16>> into tensor<1x10x!FHE.eint<16>>
    return %3 : tensor<1x10x!FHE.eint<16>>
  }
encoding: crt
tests:
  - inputs:
      - tensor: [63, 12,  7, 43, 52,  9, 26, 34, 22,  0]
        shape: [1,1,10]
    outputs:
      - tensor: [63, 12,  7, 43, 52,  9, 26, 34, 22,  0]
        shape: [1,10]
---
description: collapse_shape_2
program: |
  func.func @main(%2: tensor<1x2x1x5x1x!FHE.eint<6>>) -> tensor<2x5x!FHE.eint<6>> {
    %3 = tensor.collapse_shape %2 [[0,1], [2,3,4]] : tensor<1x2x1x5x1x!FHE.eint<6>> into tensor<2x5x!FHE.eint<6>>
    return %3 : tensor<2x5x!FHE.eint<6>>
  }
tests:
  - inputs:
      - tensor: [63, 12,  7, 43, 52,  9, 26, 34, 22,  0]
        shape: [1,2,1,5,1]
    outputs:
      - tensor: [63, 12,  7, 43, 52,  9, 26, 34, 22,  0]
        shape: [2,5]
---
description: collapse_shape_2_crt
program: |
  func.func @main(%2: tensor<1x2x1x5x1x!FHE.eint<16>>) -> tensor<2x5x!FHE.eint<16>> {
    %3 = tensor.collapse_shape %2 [[0,1], [2,3,4]] : tensor<1x2x1x5x1x!FHE.eint<16>> into tensor<2x5x!FHE.eint<16>>
    return %3 : tensor<2x5x!FHE.eint<16>>
  }
encoding: crt
tests:
  - inputs:
      - tensor: [63, 12,  7, 43, 52,  9, 26, 34, 22,  0]
        shape: [1,2,1,5,1]
    outputs:
      - tensor: [63, 12,  7, 43, 52,  9, 26, 34, 22,  0]
        shape: [2,5]
