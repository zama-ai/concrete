name: Docs - Core
env:
  crate: core
  # Source path to docs conf.py
  docs_dir: 'concrete-core/docs'
  # Target directory without leading / and with trailing /
  url_dest_dir: 'concrete/core-lib/'
  # default release version (will be overloaded for tags)
  RELEASE_VERSION: 'main'
  # github tag refs filter (to trigger tag doc publication)
  # /!\ due to a github limit: need to be manually set in publish-docs jobs
  TAG_REFS_FILTER: 'refs/tags/concrete-core-'

on:
  push:
    paths:
      - 'concrete-core/docs/**'

concurrency:
  group: docs-core-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-docs:
    runs-on: ubuntu-latest
    container: sphinxdoc/sphinx:4.3.0
    steps:
      - uses: actions/checkout@v2
      - name: Set env tags
        run: echo "RELEASE_VERSION=${GITHUB_REF#$TAG_REFS_FILTER}" >> $GITHUB_ENV
        if: startsWith(github.ref, env.TAG_REFS_FILTER)
      - name: install dependencies
        run: "pip install -r requirements.txt"
        working-directory: "${{ env.docs_dir }}"
      - name: build ${{ env.crate }} sphinx docs
        working-directory: "${{ env.docs_dir }}"
        env:
          DOC_ROOT_URL: '/${{env.url_dest_dir}}'
        run: |
          sphinx-build -b html . build/${{ env.RELEASE_VERSION }}
          cp versions.json build/
          cp index.html build/
      - name: generate docs artifact
        uses: actions/upload-artifact@v1
        with:
          name: "docs-${{ env.crate }}"
          path: "${{ env.docs_dir }}/build/"

  publish-docs:
    runs-on: ubuntu-latest
    needs: [build-docs]
    if: github.event_name == 'push' && ( startsWith(github.ref, 'refs/tags/concrete-core-') || github.ref == 'refs/heads/main' )
    steps:
      - name: Download Documentation
        id: download
        uses: actions/download-artifact@3be87be14a055c47b01d3bd88f8fe02320a9bb60
        with:
          name: "docs-${{ env.crate }}"
      - name: Publish Documentation to S3
        id: publish
        if: steps.download.outcome == 'success' && !cancelled()
        uses: jakejarvis/s3-sync-action@be0c4ab89158cac4278689ebedd8407dd5f35a83
        with:
          args: --acl public-read
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_REPO_DOCUMENTATION_BUCKET_NAME }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_IAM_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_IAM_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          SOURCE_DIR: '.'
          DEST_DIR: '${{ env.url_dest_dir }}'
      - name: Invalidate CloudFront Cache
        if: steps.publish.outcome == 'success'
        uses: awact/cloudfront-action@8bcfabc7b4bbc0cb8e55e48527f0e3a6d681627c
        env:
          SOURCE_PATH: '/${{ env.url_dest_dir }}*'
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_IAM_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_IAM_KEY }}
          DISTRIBUTION_ID: ${{ secrets.AWS_REPO_DOCUMENTATION_DISTRIBUTION_ID }}
